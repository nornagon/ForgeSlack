buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "1.12.2-0.3.1"
group = "com.derimagia.forgeslack"
archivesBaseName = "forgeslack"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

configurations.all {
    resolutionStrategy {
        force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
    }
}

repositories {
    maven { url = 'https://jitpack.io' }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    compile group: 'com.github.allbegray', name: 'slack-api', version: 'v1.4.0.RELEASE'

    // Manually include `org.slf4j` for slack-api
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    dependencies {
        include(dependency('com.fasterxml.jackson.core:.*:.*'))
        include(dependency('org.apache.http:.*:.*'))
        include(dependency('org.apache.commons:.*:.*'))
        include(dependency('org.slf4j:.*:.*'))
        include(dependency('io.netty:.*:.*'))
        include(dependency('com.typesafe:.*:.*'))
        include(dependency('com.fasterxml:.*:.*'))
        include(dependency('javassist:.*:.*'))
    }
    minimize {
        exclude 'module-info'
    }
    classifier ''
    // Can't relocate this because of something with AsyncHttpClientConfigDefaults:ASYNC_CLIENT_CONFIG_ROOT
    // but most likely this won't matter because these libraries aren't probably used elsewhere.
    // relocate "allbegray.slack", "com.derimagia.lib.com.github.allbegray"
    // relocate "org.asynchttpclient", "com.derimagia.lib.org.asynchttpclient"
    relocate "com.fasterxml.jackson.core", "com.derimagia.lib.com.fasterxml.jackson.core"
    relocate "org.apache.http", "com.derimagia.lib.org.apache.http"
    relocate "org.apache.commons", "com.derimagia.lib.org.apache.commons"
    relocate "org.slf4j", "com.derimagia.lib.org.slf4j"
    relocate "io.netty", "com.derimagia.lib.io.netty"
    relocate "com.typesafe", "com.derimagia.lib.com.typesafe"
    relocate "com.fasterxml", "com.derimagia.lib.com.fasterxml"
    relocate "javassist", "com.derimagia.lib.javassist"
}

jar.finalizedBy('reobfJar')
shadowJar.finalizedBy('reobfJar')
reobf {
    shadowJar {}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
